package me.coolmint.ngm.features.modules.exploit;

import com.google.common.eventbus.Subscribe;
import me.coolmint.ngm.event.impl.PacketEvent;
import me.coolmint.ngm.features.modules.Module;
import me.coolmint.ngm.util.client.ChatUtil;
import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket;
import net.minecraft.network.packet.s2c.play.CommandSuggestionsS2CPacket;

import java.util.Arrays;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class Plugins extends Module {
    public Plugins() {
        super("Plugins", "", Category.EXPLOIT, true, false, false);
    }

    // Suppress spell checking inspection for array of known anti-cheat plugin names
    @SuppressWarnings("SpellCheckingInspection")
    private String[] knownAntiCheats = {
            "nocheatplus",
            "grimac",
            "aac",
            "intave",
            "horizon",
            "vulcan",
            "Vulcan",
            "spartan",
            "kauri",
            "anticheatreloaded",
            "matrix",
            "themis",
            "negativity"
    };

    int ticks = 0;

    @Override
    public void onEnable(){
        ticks = 0;
        mc.player.networkHandler.sendPacket(new RequestCommandCompletionsC2SPacket(0, "/"));
    }

    @Override
    public void onTick(){
        if(ticks >= 60){
            ChatUtil.sendError("Plugins: Timeout");
            setEnabled(false);
        }
        else
            ticks++;
    }

    @Subscribe
    public void onPacket(PacketEvent event) {
        Object packet = event.getPacket();

        if (packet instanceof CommandSuggestionsS2CPacket) {
            CommandSuggestionsS2CPacket suggestionsPacket = (CommandSuggestionsS2CPacket) packet;
            Set<String> plugins = suggestionsPacket.getSuggestions().getList().stream()
                    .map(cmd -> {
                        String[] command = cmd.getText().split(":");
                        if (command.length > 1) {
                            return command[0].replace("/", "");
                        } else {
                            return null;
                        }
                    })
                    .filter(Objects::nonNull)
                    .distinct()
                    .sorted()
                    .collect(Collectors.toSet());

            takePluginInput(plugins);
        }
    }

    private void takePluginInput(Set<String> plugins) {
        if (!plugins.isEmpty()) {
            String pluginsString = plugins.stream()
                    .map(plugin -> {
                        if (Arrays.asList(knownAntiCheats).contains(plugin)) {
                            return "§a" + plugin; // AC plugin
                        } else {
                            return "§c" + plugin; // Other plugin
                        }
                    })
                    .collect(Collectors.joining(" "));


            ChatUtil.sendInfo("§aPlugins §7(§8" + plugins.size() + "§7): " + pluginsString);
        } else {
            ChatUtil.sendError("NoPluginsFound");
        }
        setEnabled(false);
    }
}
