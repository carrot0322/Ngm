package me.coolmint.ngm.features.modules.exploit;

import com.google.common.eventbus.Subscribe;
import me.coolmint.ngm.event.impl.AttackEvent;
import me.coolmint.ngm.event.impl.GameLeftEvent;
import me.coolmint.ngm.event.impl.PacketEvent;
import me.coolmint.ngm.features.modules.Module;
import me.coolmint.ngm.features.settings.Setting;
import me.coolmint.ngm.mixin.IPlayerMoveC2SPacket;
import me.coolmint.ngm.util.models.Timer;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;

public class MaceExploit extends Module {
    public Setting<Integer> height = register(new Setting<>("Height", 50, 0, 400));
    public Setting<Integer> pull = register(new Setting<>("Speed", 10, 1, 50));

    public MaceExploit() {
        super("MaceExploit", "", Category.EXPLOIT, true, false, false);
    }

    public boolean resetTiming;
    public Timer resetTimer = new Timer();
    int packetsRequired = (int) Math.ceil(Math.abs(height.getValue() / 10));

    @Override
    public void onEnable() {
        resetTimer.reset();
        resetTiming = false;

        for (int packetNumber = 0; packetNumber < (packetsRequired - 1); packetNumber++) {
            mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.OnGroundOnly(true));
        }

        mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() + height.getValue(), mc.player.getZ(), true));
        mc.player.setPosition(mc.player.getX(), mc.player.getY() + height.getValue(), mc.player.getZ());
    }

    @Override
    public void onDisable(){
        mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() + height.getValue(), mc.player.getZ(), true));
        mc.player.setPosition(mc.player.getX(), mc.player.getY() + 4, mc.player.getZ());

        mc.player.setOnGround(false);
    }

    @Override
    public void onUpdate(){
        if(fullNullCheck()) return;

        mc.player.addVelocity(0, -pull.getValue(), 0);

        if(resetTiming && resetTimer.passedMs(500)){
            resetTiming = false;

            for (int packetNumber = 0; packetNumber < (packetsRequired - 1); packetNumber++) {
                mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.OnGroundOnly(true));
            }

            mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() + height.getValue(), mc.player.getZ(), true));
            mc.player.setPosition(mc.player.getX(), mc.player.getY() + height.getValue(), mc.player.getZ());

            resetTimer.reset();
        }
    }

    @Subscribe
    public void onAttack(AttackEvent e){
        resetTiming = true;
    }

    @Subscribe
    public void onPacketSend(PacketEvent.Send e) {
        if (e.getPacket() instanceof PlayerMoveC2SPacket pac) {
            ((IPlayerMoveC2SPacket) pac).setOnGround(false);
        }
    }

    @Subscribe
    public void onLeft(GameLeftEvent e){
        this.setEnabled(false);
    }
}
